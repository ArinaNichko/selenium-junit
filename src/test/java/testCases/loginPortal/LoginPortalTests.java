package testCases.loginPortal;

import base.BaseTest;
import com.epam.reportportal.junit5.ReportPortalExtension;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ArgumentsSource;
import org.junit.jupiter.params.provider.MethodSource;
import org.junit.jupiter.params.provider.ValueSource;
import org.openqa.selenium.Alert;
import pages.LoginPortalPage;
import userDecorator.DefaultUser;
import utils.UserArgumentsProvider;

import java.util.List;

@ExtendWith(ReportPortalExtension.class)
public class LoginPortalTests extends BaseTest {
  private static LoginPortalPage loginPortalPage;
  private static final String VALIDATION_FAILED = "validation failed";

  @BeforeEach
  public void setLoginPortalPage() {
    loginPortalPage = pageFactoryManager.getPage(LoginPortalPage.class);
  }

  @ParameterizedTest
  @MethodSource("utils.DataUtils#provideUserData")
  public void checkLoginWithDefaultUser(DefaultUser user) {
    homePage.openHomePage(baseUrl);
    homePage.clickOnLoginPortalLink();

    List<String> tabsList = homePage.tabsList();
    homePage.switchToTab(tabsList.get(FIRST));

    loginPortalPage.implicitWait(timeout);
    loginPortalPage.loginWithDefaultUser(user.getUsername(), user.getPassword());

    Alert alert = loginPortalPage.switchToAlert();
    String getAlertMessage = loginPortalPage.getAlertText(alert);

    loginPortalPage.acceptAlert(alert);

    Assertions.assertEquals(getAlertMessage, VALIDATION_FAILED);
  }

  @ParameterizedTest
  @ValueSource(strings = {"Arina", "Oleg"})
  public void checkLoginWithAutoGeneratedPassword(String username) {
    homePage.openHomePage(baseUrl);
    homePage.clickOnLoginPortalLink();

    List<String> tabsList = homePage.tabsList();
    homePage.switchToTab(tabsList.get(FIRST));

    loginPortalPage.implicitWait(timeout);
    loginPortalPage.loginWithAutoGeneratedPassword(username);

    Alert alert = loginPortalPage.switchToAlert();
    String getAlertMessage = loginPortalPage.getAlertText(alert);

    loginPortalPage.acceptAlert(alert);

    Assertions.assertEquals(getAlertMessage, VALIDATION_FAILED);
  }

  @ParameterizedTest
  @ArgumentsSource(UserArgumentsProvider.class)
  public void checkLoginWithEncodedPassword(String username, String password) {
    homePage.openHomePage(baseUrl);
    homePage.clickOnLoginPortalLink();

    List<String> tabsList = homePage.tabsList();
    homePage.switchToTab(tabsList.get(FIRST));

    loginPortalPage.implicitWait(timeout);
    loginPortalPage.loginInWithEncodedPassword(username, password);

    Alert alert = loginPortalPage.switchToAlert();
    String getAlertMessage = loginPortalPage.getAlertText(alert);

    loginPortalPage.acceptAlert(alert);

    Assertions.assertEquals(getAlertMessage, VALIDATION_FAILED);
  }

  @ParameterizedTest
  @ArgumentsSource(UserArgumentsProvider.class)
  public void checkLoginWithAutoGeneratedEncodedPassword(String username, String password) {
    homePage.openHomePage(baseUrl);
    homePage.clickOnLoginPortalLink();

    List<String> tabsList = homePage.tabsList();
    homePage.switchToTab(tabsList.get(FIRST));

    loginPortalPage.implicitWait(timeout);
    loginPortalPage.loginInWithAutoGeneratedEncodedPassword(username, password);

    Alert alert = loginPortalPage.switchToAlert();
    String getAlertMessage = loginPortalPage.getAlertText(alert);

    loginPortalPage.acceptAlert(alert);

    Assertions.assertEquals(getAlertMessage, VALIDATION_FAILED);
  }
}
